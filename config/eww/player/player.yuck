;; Vars ;;

(defpoll music-player		:interval "1s" "playerctl -l | grep spotify")
(defpoll music-art			:interval "1s" "playerctl -p spotify metadata mpris:artUrl | sed 's/^.*: //'")
(defpoll music-title 		:interval "1s" "playerctl -p spotify metadata title")
(defpoll music-artist 		:interval "1s" "playerctl -p spotify metadata artist")
(defpoll music-status 		:interval "1s" "playerctl -p spotify status")
(defpoll music-position 	:interval "1s" "playerctl -p spotify position")
(defpoll music-positions	:interval "1s" "playerctl -p spotify metadata mpris:length | sed 's/^.*: //'")
(defpoll music-length 		:interval "1s" "playerctl -p spotify metadata mpris:length | sed 's/^.*: //'")
(defpoll music-lengths 		:interval "1s" "playerctl -p spotify metadata mpris:length | sed 's/^.*: //'")
(defpoll shuffle 			:interval "1s" "playerctl -p spotify loop")
(defpoll loop 				:interval "1s" "playerctl -p spotify shuffle")

;; Widgets ;;

(defwidget shuffle [color action status]
	(eventbox
		:cursor "pointer"
		(button 
			:onclick action
			:style "color: ${color}"
			:tooltip status
			"󰒟"
		)
	)
)

(defwidget loop [icon color status action]
	(eventbox
		:cursor "pointer"
		(button 
			:onclick action
			:style "color: ${color}"
			:tooltip status
			icon
		)
	)
)

(defwidget player []
	(box 
		:class "player" 
		:space-evenly false
		(box 
			:class "player-art" 
			:style "background-image: url('${music-art}')"
			(box 
				:class "player-info" 
				:space-evenly false 
				:orientation "v" 
				:spacing 10
				(box 
					:class "top-icons"
					(box 
						:space-evenly false 
						:spacing 10
						(shuffle
							:action "playerctl -p spotify shuffle toggle"
							:color {shuffle == "On" ? "#81ae5f" : "#b8bfe5"}
							:status shuffle
						)
						(loop
							:action "playerctl -p spotify loop toggle"
							:icon "󰑖" ;; Cambiar a tu icono preferido para el modo de repetición
							:color {loop == "On" ? "#81ae5f" : "#b8bfe5"}
							:status loop
						)
					)
					(box
						(button 
							:class "spotify-icon"
							:halign "end"
							"󰓇"
						)
					)
				)
				(label 
					:class "player-title" 
					:halign "start" 
					:text music-title
					:limit-width 30
					:wrap true
					:xalign 0
				)
				(label 
					:class "player-artist" 
					:halign "start" 
					:text music-artist 
					:limit-width 35
				)
				
				(box
					:space-evenly false
					:orientation "v"
					:valign "end"
					:spacing 6
					:vexpand true
					(box 
						:class "player-bar" 
						(eventbox
							:cursor "pointer"
							(scale 
								:onchange "playerctl -p spotify seek {}"
								:min 0 
								:max music-lengths
								:value music-positions
							)
						)
					)
					(box 
						:class "player-position" 
						:space-evenly false 
						:valign "end"
						:spacing 3
						(label 
							:class "player-time"
							:text music-position
						)
						(label :class "player-time" :text "/")
						(label 
							:class "player-time"
							:text music-length
						)	
					)
				)
			)
		)
		(box 
			:class "player-controls" 
			:orientation "v"
			:valign "center"
			:hexpand true
			:space-evenly false
			:spacing 20
			(eventbox
				:cursor "pointer"
				(button 
					:class "player-previous" 
					:onclick "playerctl -p spotify previous"
					"󰒮"
				)
			)
			(eventbox
				:cursor "pointer"
				(button 
					:class "player-toggle" 
					:onclick "playerctl -p spotify play-pause" 
					{music-status == "Playing" ? "󰏤" : music-status == "Paused" ? "󰐊" : "󰓛"}
				)
			)
			(eventbox
				:cursor "pointer"
				(button 
					:class "player-next" 
					:onclick "playerctl -p spotify next" 
					"󰒭"
				)
			)
      (eventbox
				:cursor "pointer"
				(button 
					:class "min" 
					:onclick "eww open --toggle music" 
					"󰅙"
				)
			)
		)		
	)
)

;; Windows ;;

(defwindow music
    :geometry (geometry :y "-7%"
						:anchor "bottom center")
	:wm-ignore false
    (player))
