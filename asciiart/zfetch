#!/usr/bin/env bash

#   z0mbi3
#   https://github.com/gh0stzk/dotfiles
#   z0mbi3.zk@protonmail.com
#   This script is a modified version of https://github.com/Mangeshrex/rxfetch

#colors
#bold="(tput bold)"
magenta="\033[1;35m"
green="\033[1;32m"
white="\033[1;37m"
blue="\033[1;34m"
red="\033[1;31m"
black="\033[1;30m"
yellow="\033[1;33m"
cyan="\033[1;36m"
reset="\033[0m"
bgyellow="\033[1;43;33m"
bgwhite="\033[1;47;37m"
zgreen1="\033[0;32m"
zgray="\033[0;37m"
zblue="\033[0;34m"
c0="${reset}"
c1="${magenta}"
c2="${green}"
c3="${white}"
c4="${blue}"
c5="${red}"
c6="${yellow}"
c7="${cyan}"
c8="${black}"
c9="${bgyellow}"
c10="${bgwhite}"
c11="${zgreen1}"
c12="${zgray}"
c13="${zblue}"

get_init() {
	if pidof -q systemd; then
		echo 'systemd'
	elif [ -f '/sbin/openrc' ]; then
		echo 'openrc'
	elif [ -f '/sbin/dinit' ]; then
		echo 'dinit'
	else
		cut -d ' ' -f 1 /proc/1/comm
	fi
}

get_uptime() {
		uptime -p | sed 's/up//'
}

get_pkg_count() {
	package_managers=('xbps-install' 'apk' 'port' 'apt' 'pacman' 'nix' 'dnf' 'rpm' 'emerge' 'eopkg')
	for package_manager in "${package_managers[@]}"; do
		if command -v "$package_manager" 2>/dev/null >&2; then
			case "$package_manager" in
			xbps-install) xbps-query -l | wc -l ;;
			apk) apk search | wc -l ;;
			apt) if [ "$kernel" != "Darwin" ]; then 
					echo $(($(apt list --installed 2>/dev/null | wc -l) - 1))
				 else
					echo 0
				 fi
				 ;;
			pacman) pacman -Q | wc -l ;;
			nix) nix-env -qa --installed '*' | wc -l ;;
			dnf) dnf list installed | wc -l ;;
			rpm) rpm -qa | wc -l ;;
			emerge) qlist -I | wc -l ;;
			port) port installed 2>/dev/null | wc -l | awk 'NR==1{print $1}' ;;
			eopkg) eopkg li | wc -l ;;
			esac

			# if a package manager is found return from the function
			return
		fi
	done
	echo 0
}

# Get count of snaps installed
get_snap_count() {
	if command -v snap 2>/dev/null >&2; then
		count=$(snap list | wc -l)

		# snap list shows a header line
		echo $((count - 1))

		return
	fi

	echo 0
}

# Get count of flatpaks installed
get_flatpak_count() {
	if command -v flatpak 2>/dev/null >&2; then
		flatpak list | wc -l
		return
	fi

	echo 0
}

#Get count of brews(formulas + casks) installed
get_brew_count() {
	if command -v brew 2>/dev/null >&2; then
		brew list | wc -l | awk 'NR==1{print $1}'
		return
	fi

	echo 0
}

# Get package information formatted
get_package_info() {
	pkg_count=$(get_pkg_count)
	snap_count=$(get_snap_count)
	flatpak_count=$(get_flatpak_count)
	brew_count=$(get_brew_count)

	if [ "$pkg_count" -ne 0 ]; then
		echo -n "$pkg_count"
		if [ "$snap_count" -ne 0 ]; then
			echo -n " ($snap_count snaps"
			if [ "$flatpak_count" -ne 0 ]; then
				echo ", $flatpak_count flatpaks)"
			else
				echo ")"
			fi
		elif [ "$flatpak_count" -ne 0 ]; then
			echo " ($flatpak_count flatpaks)"
		elif [ "$brew_count" -ne 0 ]; then
			cask_count=$(brew list --casks | wc -l | awk 'NR==1{print $1}')
			formula_count=$(brew list --formula | wc -l | awk 'NR==1{print $1}')
			echo ", $brew_count brews ($formula_count formulas & $cask_count casks)"
		else
			echo ""
		fi
	elif [ "$snap_count" -ne 0 ]; then
		echo -n "$snap_count snaps"

		if [ "$flatpak_count" -ne 0 ]; then
			echo ", $flatpak_count flatpaks"
		else
			echo ""
		fi
	elif [ "$flatpak_count" -ne 0 ]; then
		echo "$flatpak_count flatpaks"
	elif [ "$brew_count" -ne 0 ]; then
		cask_count=$(brew list --casks | wc -l | awk 'NR==1{print $1}')
		formula_count=$(brew list --formula | wc -l | awk 'NR==1{print $1}')
		echo "$brew_count brews ($formula_count formulas & $cask_count casks)"
	else
		echo "Unknown"
	fi
}

distro() {
		awk -F '"' '/PRETTY_NAME/ { print $2 }' /etc/os-release
}

storage() {
    df -h / | awk '/^\//{print $3}'
}

# Get Memory usage
get_mem () {
  free --mega | sed -n -E '2s/^[^0-9]*([0-9]+) *([0-9]+).*/'"${space}"'\2 MB/p'
}

# Get DE/WM
# Reference: https://github.com/unixporn/robbb/blob/master/fetcher.sh
get_de_wm() {
	wm="${XDG_CURRENT_DESKTOP#*:}"
	[ "$wm" ] || wm="$DESKTOP_SESSION"

	# for most WMs
	[ ! "$wm" ] && [ "$DISPLAY" ] && command -v xprop >/dev/null && {
		id=$(xprop -root -notype _NET_SUPPORTING_WM_CHECK 2>/dev/null)
		id=${id##* }
		wm=$(xprop -id "$id" -notype -len 100 -f _NET_WM_NAME 8t 2>/dev/null | grep '^_NET_WM_NAME' | cut -d\" -f 2)
	}

	# for non-EWMH WMs
	[ ! "$wm" ] || [ "$wm" = "LG3D" ] && {
		wms=('sway' 'kiwmi' 'wayfire' 'sowm' 'catwm' 'fvwm' 'dwm' '2bwm' 'monsterwm' 'tinywm' 'xmonad')
		for current_wm in "${wms[@]}"; do
			if pgrep -x "$current_wm" 2>/dev/null >&2; then
				wm="${current_wm}";
				break
			fi
		done
	}

	echo "${wm:-unknown}"
}

echo -e "               "
echo -e "                ${c8}%%%${c0}                "
echo -e "         ${c8}%%%%%${c0}${c13}//${c8}%%%%%${c0}              "
echo -e "       ${c8}%%${c0}${c4}************${c8}%%%${c0}           "
echo -e "    ${c8}(%%${c0}${c13}//${c11}############${c13}*****${c8}%%${c0}       "
echo -e "  ${c8}%%%%%${c0}${c13}**${c11}###&&&&&&&&&###${c13}**//       ${c1}os${c3}     $(distro)"
echo -e "  ${c8}%%(${c0}${c13}**${c11}##&&&#########&&&##${c13}**       ${c2}ker${c3}    $(uname -r)"
echo -e "  ${c8}%%(${c0}${c13}**${c11}##${c2}*****#####${c2}*****##${c13}**${c8}%%%${c0}    ${c7}pkgs${c3}   $(get_package_info)"
echo -e "  ${c8}%%(${c0}${c13}**${c11}##     *****     ##${c4}**       ${c4}sh${c3}     ${SHELL##*/}  ${c6}󰮯 ${c6} ${c2}󰊠 ${c2} ${c4}󰊠 ${c4} ${c5}󰊠 ${c5} ${c7}󰊠 ${c7} ${c1}󰊠 ${c1}"
echo -e "     ${c8}//${c0}${c11}##   ${c3}@@${c2}**   ${c3}@@   ${c11}##//       ${c6}ram${c3}    $(get_mem)"
if [ -n "$DISPLAY" ]; then
	echo -e "       ${c11}##     ${c2}**${c11}###     ##         ${c5}de/wm${c3}  $(get_de_wm)"
fi
echo -e "       ${c11}#######     #####//         ${c1}init${c3}   $(get_init)"
echo -e "         ${c11}###${c2}**${c11}&&&&&${c2}**${c11}###           ${c4}disk${c3}   $(storage) Used"
echo -e "         ${c11}&&&         &&&           ${c6}up${c3}    $(get_uptime)"
echo -e "         ${c11}&&&${c5}////   ${c11}&&            "
echo -e "            ${c11}&&${c5}//${c3}@@@${c11}**            "
echo -e "              ..***         "
echo -e "               \033[0m"
